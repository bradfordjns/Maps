#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    Jun 18, 2018 10:19:42 AM


try:
    from Tkinter import *

except ImportError:
    from tkinter import *

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True


def Execute_Script(Mapbox_Entry):
    global self
    print('MapConfig_window_support.Execute')
    sys.stdout.flush()
    print(Mapbox_Entry)


def create_new_map(mapconfig_file_location, ESRI_entry, Google_entry, Mapbox_entry):
    import os
    import xml.etree.ElementTree
    from xml.sax.saxutils import unescape
    filename = mapconfig_file_location

    root = xml.etree.ElementTree.Element('mc')

    ec = xml.etree.ElementTree.SubElement(root, "ec")
    gc = xml.etree.ElementTree.SubElement(root, "gc")
    mbc = xml.etree.ElementTree.SubElement(root, "mbc")

    apps = xml.etree.ElementTree.SubElement(ec, "apps")
    key = xml.etree.ElementTree.SubElement(apps, "key")
    root[0][0][0].text = "<![CDATA[" + ESRI_entry + "]]>;"

    mk = xml.etree.ElementTree.SubElement(gc, "mk")
    root[1][0].attrib = {'isPremier': "false"}
    root[1][0].text = Google_entry

    tk = xml.etree.ElementTree.SubElement(mbc, "tk")
    root[2][0].text = '<![CDATA[' + Mapbox_entry + ']]>'

    tree = xml.etree.ElementTree.ElementTree(root)

    tree.write(filename)

    with open(filename, 'r') as myfile:
        data = myfile.read()
    myfile.close()
    os.remove(filename)

    new = unescape(data)
    new = new.replace(';', '')

    f = open(filename, 'w')
    f.write(new)
    f.close()


def Check_applications(MicroStrategy_Web, MicroStrategy_Mobile, MicroStrategy_Library):
    global self
    print('MapConfig_window_support.Check_applications')
    sys.stdout.flush()
    print('MicroStrategy Web application: ' + MicroStrategy_Web + '\n')
    print('MicroStrategy Mobile application: ' + MicroStrategy_Mobile + '\n')
    print('MicroStrategy Library application: ' + MicroStrategy_Library + '\n')

    [alter_web, web_mapconfig_file] = Check_web_applications(str(MicroStrategy_Web))

    if alter_web > 0:
        print('web_mapconfig_file: ' + str(web_mapconfig_file))

    # [alter_mobile, mobile_mapconfig_file] = Check_mobile_applications(str(MicroStrategy_Mobile))
    alter_mobile = 0
    mobile_mapconfig_file = ''
    if alter_mobile > 0:
        print('mobile_mapconfig_file: ' + str(mobile_mapconfig_file))

    return alter_web, web_mapconfig_file, alter_mobile, mobile_mapconfig_file

    # library_mapconfig_file=Check_library_applications(MicroStrategy_Library)
    # print('library_mapconfig_file: '+str(library_mapconfig_file))


def Check_web_applications(MicroStrategy_Web):
    import pathlib
    import tkMessageBox
    import os
    global self
    if os.path.isdir(MicroStrategy_Web):
        # verify the user selected stage directory follows the correct MicroStrategy path
        if os.path.basename(MicroStrategy_Web) == 'MicroStrategy':

            print(MicroStrategy_Web, '\n')
            web_mapconfig_folder = MicroStrategy_Web + '/plugins/ConnectorForMap/WEB-INF/xml/config'

            if not os.path.exists(web_mapconfig_folder):
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "The folder structure does not exist in MicroStrategy Web, \n creating it for you")
                os.makedirs(web_mapconfig_folder)

            web_mapconfig_file = MicroStrategy_Web + '/plugins/ConnectorForMap/WEB-INF/xml/config/mapConfig.xml'

            web_mapconfig_file = pathlib.Path(web_mapconfig_file)
            print(web_mapconfig_file, '\n')

            if web_mapconfig_file.is_file():
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "MapConfig.xml file in MicroStrategy Web already exists, \n please review the current keys")
                alter_web = 2
                return alter_web, web_mapconfig_file
            else:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "MapConfig.xml file does not exist in MicroStrategy Web, \n please review and update")

        else:
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "MicroStrategy Web Folder does not match the end of the path specified, \n please review and update")
            return
    else:
        tkMessageBox.showwarning("MicroStrategy Map Config",
                                 "The end of this path is not MicroStrategy Web, \n please review and update")
        alter_web = 0
        web_mapconfig_file = ''
        return alter_web, web_mapconfig_file


def Check_mobile_applications(MicroStrategy_Mobile):
    import pathlib
    import tkMessageBox
    import os
    global self
    if os.path.isdir(MicroStrategy_Mobile):
        # verify the user selected stage directory follows the correct MicroStrategy path
        if os.path.basename(MicroStrategy_Mobile) == 'MicroStrategyMobile':

            print(MicroStrategy_Mobile, '\n')

            mobile_mapconfig_folder = MicroStrategy_Mobile + '/plugins/ConnectorForMap/WEB-INF/xml/config'

            if not os.path.exists(mobile_mapconfig_folder):
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "The folder structure does not exist in MicroStrategy Mobile, \n creating it for you")
                os.makedirs(mobile_mapconfig_folder)

            mobile_mapconfig_file = MicroStrategy_Mobile + '/plugins/ConnectorForMap/WEB-INF/xml/config/mapConfig.xml'
            mobile_mapconfig_file = pathlib.Path(mobile_mapconfig_file)
            print(mobile_mapconfig_file, '\n')

            if mobile_mapconfig_file.is_file():
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "MapConfig.xml file in MicroStrategy Mobile already exists, \n please review the current keys")
                alter_mobile = 2
                return alter_mobile, mobile_mapconfig_file
            else:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "MapConfig.xml file does not exist in MicroStrategy Mobile, \n please review and update")

        else:
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "MicroStrategy Mobile Folder does not match the end of the path specified, \n please review and update")
            return
    else:
        tkMessageBox.showwarning("MicroStrategy Map Config",
                                 "The end of this path is not MicroStrategy Mobile, \n please review and update")
        alter_mobile = 0
        mobile_mapconfig_file = ''
        return alter_mobile, mobile_mapconfig_file


def Check_library_applications(MicroStrategy_Library):
    import pathlib
    import tkMessageBox
    import os
    global self
    if os.path.isdir(MicroStrategy_Library):
        # verify the user selected stage directory follows the correct MicroStrategy path
        if os.path.basename(MicroStrategy_Library) == 'MicroStrategyLibrary':

            print(MicroStrategy_Library, '\n')

            library_mapconfig_file = MicroStrategy_Library + '/plugins/ConnectorForMap/WEB-INF/xml/config/mapConfig.xml'
            library_mapconfig_file = pathlib.Path(library_mapconfig_file)
            print(library_mapconfig_file, '\n')

            if library_mapconfig_file.is_file():
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "MapConfig.xml file in MicroStrategy Library already exists, \n please review and update")
                return library_mapconfig_file
            else:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "MapConfig.xml file does not exist in MicroStrategy Library, \n please review and update")

        else:
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "MicroStrategy Library Folder does not match the end of the path specified, \n please review and update")
            return
    else:
        tkMessageBox.showwarning("MicroStrategy Map Config",
                                 "MicroStrategy Library Folder does not exist, \n please review and update")
        return


def Check_keys(Advance, ESRI, Google, Mapbox, ESRI_Entry, Google_Entry, Mapbox_Entry):
    global root
    global self
    print('MapConfig_window_support.Check_keys')
    sys.stdout.flush()
    print('Checking if configuration keys have been provided\n')

    ESRI = ESRI_checks(ESRI, ESRI_Entry)

    Google = Google_checks(Google, Google_Entry)

    Mapbox = Mapbox_checks(Mapbox, Mapbox_Entry)

    if (ESRI + Google + Mapbox) > 0:
        Advance = 1

    return Advance, ESRI, Google, Mapbox, ESRI_Entry, Google_Entry, Mapbox_Entry


def ESRI_checks(ESRI, ESRI_Entry):
    import tkMessageBox
    global sys
    global root
    global self
    print('MapConfig_window_support.ESRI_checks')

    if ESRI_Entry == "":
        tkMessageBox.showwarning("MicroStrategy Map Config",
                                 "There was no provided ESRI key, not configuring ESRI")

        # ESRI = 0

        # print('I wanna cancel\n')
        return ESRI
    else:
        print('This was the provided ESRI key', ESRI_Entry, '\n')
        if len(ESRI_Entry) == 286:
            if ESRI_Entry.isalnum() == True:

                ESRI = 1

                return ESRI
            else:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "The key is not alfa-numeric, not configuring ESRI")
                return ESRI

        elif len(ESRI_Entry) > 286:
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "The key is too long, not configuring ESRI")
            return ESRI

        else:
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "The key is too short, not configuring ESRI")
            return ESRI


def Google_checks(Google, Google_Entry):
    import tkMessageBox
    global sys
    global root
    global self
    print('MapConfig_window_support.Google_checks')

    if Google_Entry == "":
        tkMessageBox.showwarning("MicroStrategy Map Config",
                                 "There was no provided Google key, not configuring Google")

        # Google = 0

        # print('I wanna cancel\n')
        return Google
    else:
        print('This was the provided Google key', Google_Entry, '\n')
        if len(Google_Entry) == 39:
            if bool(re.match("^[A-Za-z0-9-]*$", Google_Entry)) == True:

                Google = 1

                return Google
            else:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "The key is not correct, should only contain letters,numbers, and dashes, not configuring Google")
                return Google

        elif len(Google_Entry) > 39:
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "The key is too long, not configuring Google")
            return Google

        else:
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "The key is too short, not configuring Google")
            return Google


def Mapbox_checks(Mapbox, Mapbox_Entry):
    import tkMessageBox
    global sys
    global root
    global self
    print('MapConfig_window_support.Mapbox_checks')

    if Mapbox_Entry == "":
        tkMessageBox.showwarning("MicroStrategy Map Config",
                                 "There was no provided Mapbox key, not configuring Mapbox")

        # Mapbox = 0

        # print('I wanna cancel\n')
        return Mapbox
    else:
        print('This was the provided Mapbox key', Mapbox_Entry, '\n')
        if len(Mapbox_Entry) == 470:
            if Mapbox_Entry.isalnum() == True:

                Mapbox = 1

                return Mapbox
            else:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "The key is not alfa-numeric, not configuring Mapbox")
                return Mapbox

        elif len(Mapbox_Entry) > 470:
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "The key is too long, not configuring Mapbox")
            return Mapbox

        else:
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "The key is too short, not configuring Mapbox")
            return Mapbox


def Cancel():
    import tkMessageBox
    print('MapConfig_window_support.Cancel')
    sys.stdout.flush()
    msg = tkMessageBox.askyesno("MicroStrategy Map Config", "Are you sure you want to cancel the config window?")
    if msg:
        global root
        root.quit()


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == '__main__':
    import MapConfig_window

    MapConfig_window.vp_start_gui()
