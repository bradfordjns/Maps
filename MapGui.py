#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    Jun 21, 2018 11:07:18 AM

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import MapGui_support

global web_mapconfig_file


def check_current_map(self, web_mapconfig_file):
    import xml.etree.ElementTree
    tree = xml.etree.ElementTree.parse(web_mapconfig_file)
    root = tree.getroot()
    len(root.getchildren())

    ec_index = 0
    gc_index = 0
    mbc_index = 0

    for i in range(0, len(root.getchildren())):
        if root[i].tag == 'ec':
            ec_index = i
        elif root[i].tag == 'gc':
            gc_index = i
        elif root[i].tag == 'mbc':
            mbc_index = i

    ESRI_Existing = root[ec_index][0][0].text
    if (str(root[ec_index][0][0].text)) == 'None':
        ESRI_Existing = ''
        self.App1ScrolledESRIstatus.delete(0, END)
        self.App1ScrolledESRIstatus.insert(END, 'No Key')
    else:

        self.App1ScrolledESRIstatus.delete(0, END)
        self.App1ScrolledESRIstatus.insert(END, ESRI_Existing)

    Google_Existing = root[gc_index][0].text
    if (str(root[gc_index][0].text)) == 'None':
        Google_Existing = ''

        self.App1ScrolledGooglestatus.delete(0, END)
        self.App1ScrolledGooglestatus.insert(END, 'No Key')
    else:

        self.App1ScrolledGooglestatus.delete(0, END)
        self.App1ScrolledGooglestatus.insert(END, Google_Existing)

    Mapbox_Existing = root[mbc_index][0].text
    if (str(root[mbc_index][0].text)) == 'None':
        Mapbox_Existing = ''
        self.App1ScrolledMapboxstatus.delete(0, END)
        self.App1ScrolledMapboxstatus.insert(END, 'No Key')
    else:
        self.App1ScrolledMapboxstatus.delete(0, END)
        self.App1ScrolledMapboxstatus.insert(END, Mapbox_Existing)

    return ESRI_Existing, Google_Existing, Mapbox_Existing


def create_new_map(mapconfig_file_location, ESRI_entry, Google_entry, Mapbox_entry):
    import os
    import xml.etree.ElementTree
    from xml.sax.saxutils import unescape
    filename = mapconfig_file_location

    root = xml.etree.ElementTree.Element('mc')

    if ESRI_entry == 'No Key':
        ESRI_entry = ''
    if Google_entry == 'No Key':
        Google_entry = ''
    if Mapbox_entry == 'No Key':
        Mapbox_entry = ''

    ec = xml.etree.ElementTree.SubElement(root, "ec")
    gc = xml.etree.ElementTree.SubElement(root, "gc")
    mbc = xml.etree.ElementTree.SubElement(root, "mbc")

    apps = xml.etree.ElementTree.SubElement(ec, "apps")
    key = xml.etree.ElementTree.SubElement(apps, "key")
    root[0][0][0].text = "<![CDATA[" + ESRI_entry + "]]>;"

    mk = xml.etree.ElementTree.SubElement(gc, "mk")
    root[1][0].attrib = {'isPremier': "false"}
    root[1][0].text = Google_entry

    tk = xml.etree.ElementTree.SubElement(mbc, "tk")
    root[2][0].text = '<![CDATA[' + Mapbox_entry + ']]>'

    tree = xml.etree.ElementTree.ElementTree(root)

    tree.write(filename)

    with open(filename, 'r') as myfile:
        data = myfile.read()
    myfile.close()
    os.remove(filename)

    new = unescape(data)
    new = new.replace(';', '')

    f = open(filename, 'w')
    f.write(new)
    f.close()


def Check_web_applications(self, MicroStrategy_Web):
    import pathlib
    import tkMessageBox
    import os
    global web_mapconfig_folder
    if os.path.isdir(MicroStrategy_Web):
        # verify the user selected stage directory follows the correct MicroStrategy path

        print(MicroStrategy_Web, '\n')
        web_mapconfig_folder = MicroStrategy_Web + '/plugins/ConnectorForMap/WEB-INF/xml/config'

        if not os.path.exists(web_mapconfig_folder):
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "The folder structure does not exist in MicroStrategy Web, \n creating it for you")
            os.makedirs(web_mapconfig_folder)
            # self.App1FolderStatus.configure(text='''The folder structure already exists in MicroStrategy Web''')

        web_mapconfig_file = MicroStrategy_Web + '/plugins/ConnectorForMap/WEB-INF/xml/config/mapConfig.xml'

        web_mapconfig_file = pathlib.Path(web_mapconfig_file)
        print(web_mapconfig_file, '\n')

        if web_mapconfig_file.is_file():

            #                self.App1FileStatus.configure(text='''The MapConfig.xml file already exists in MicroStrategy Web''')

            [ESRI_Existing, Google_Existing, Mapbox_Existing] = check_current_map(self, str(web_mapconfig_file))

            missing = 0
            if ESRI_Existing == '':
                missing = missing + 1
            if Google_Existing == '':
                missing = missing + 1
            if Mapbox_Existing == '':
                missing = missing + 1

            if missing == 0:
                self.App1KeyStatus.configure(text='''missing no keys''')
                return web_mapconfig_file
            elif missing == 3:
                self.App1KeyStatus.configure(
                    text='''missing all keys''')

            else:
                self.App1KeyStatus.configure(text='''missing some keys''')

            alter_web = 2
            return alter_web, web_mapconfig_file
        else:
            self.App1KeyStatus.configure(
                text='''missing all keys''')

            ESRI_entry = ''
            Google_entry = ''
            Mapbox_entry = ''
            web_mapconfig_file = MicroStrategy_Web + '/plugins/ConnectorForMap/WEB-INF/xml/config/mapConfig.xml'

            create_new_map(str(web_mapconfig_file), ESRI_entry, Google_entry, Mapbox_entry)

            check_current_map(self, web_mapconfig_file)
        return web_mapconfig_file


def donothing():
    filewin = Toplevel(root)
    button = Button(filewin, text="Do nothing button")
    button.pack()


def help():
    filewin = Toplevel(root)
    button = Button(filewin, text="Do help button", command=close_help)
    button.pack()


def close_help():
    print('closing')


def about():
    filewin = Toplevel(root)
    button = Button(filewin, text="Do about button")
    button.pack()


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    # root.state("zoomed")
    top = MicroStrategyMapConfig(root)
    MapGui_support.init(root, top)
    menubar = Menu(root)
    filemenu = Menu(menubar, tearoff=0)
    filemenu.add_command(label="Reset", command=top.reset_MainWindow)
    filemenu.add_separator()
    filemenu.add_command(label="Open", command=top.app1_browse)

    filemenu.add_command(label="Save", command=top.save)
    filemenu.add_command(label="Save as...", command=top.saveas)
    filemenu.add_separator()
    filemenu.add_command(label="Exit", command=destroy_MicroStrategyMapConfig)
    menubar.add_cascade(label="File", menu=filemenu)

    editmenu = Menu(menubar, tearoff=0)
    editmenu.add_command(label="Add Keys", command=top.InputKeyWindow)
    editmenu.add_separator()

    copymenu = Menu(editmenu, tearoff=0)
    editmenu.add_cascade(label="Copy Keys", menu=copymenu)
    copymenu.add_command(label="Copy ESRI Key", command=top.copy_ESRI_Keys)
    copymenu.add_command(label="Copy Google Key", command=top.copy_Google_Keys)
    copymenu.add_command(label="Copy Mapbox Key", command=top.copy_Mapbox_Keys)

    editmenu.add_separator()
    menubar.add_cascade(label="Edit", menu=editmenu)

    removemenu = Menu(editmenu, tearoff=0)
    editmenu.add_cascade(label="Remove Keys", menu=removemenu)
    removemenu.add_command(label="Remove All Keys", command=top.Remove_all_Keys)
    removemenu.add_command(label="Remove ESRI Key", command=top.Remove_ESRI_Keys)
    removemenu.add_command(label="Remove Google Key", command=top.Remove_Google_Keys)
    removemenu.add_command(label="Remove Mapbox Key", command=top.Remove_Mapbox_Keys)

    keyrequest_menu = Menu(menubar, tearoff=0)

    keyrequest_menu.add_command(label="ESRI", command=top.requestESRI)
    # site=https://software.microstrategy.com/Download/ESRIMapKeyGenerator_Employee.aspx

    keyrequest_menu.add_command(label="Google", command=top.requestGoogle)
    # site=https://developers.google.com/maps/documentation/javascript/get-api-key

    keyrequest_menu.add_command(label="Mapbox", command=top.requestMapbox)
    # site=https://software.microstrategy.com/Download/MapboxKeyGenerator_Employee.aspx

    menubar.add_cascade(label="Request Keys", menu=keyrequest_menu)

    helpmenu = Menu(menubar, tearoff=0)
    helpmenu.add_command(label="Help", command=help)
    helpmenu.add_command(label="About...", command=about)
    menubar.add_cascade(label="Help", menu=helpmenu)
    root.config(menu=menubar)
    root.mainloop()
    root.mainloop()


w = None


def create_MicroStrategyMapConfig(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    top = MicroStrategyMapConfig(w)
    MapGui_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_MicroStrategyMapConfig():
    global w, root
    root.destroy()
    # w.destroy()
    # w = None


def destroy_newKeysWindow():
    global new_keys
    new_keys.destroy()
    new_keys = None


# def CancelMainWindow():
#     import tkMessageBox
#     msg = tkMessageBox.askyesno("MicroStrategy Map Config", "Are you sure you want to cancel config window?")
#     if msg:
#         global root
#         root.quit()


class MicroStrategyMapConfig:

    def save(self):
        import tkMessageBox
        web_mapconfig_file = self.App1ScrolledMapLocation.get()
        if web_mapconfig_file == '':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot save right now, \n Select File -> Open  (To open the target application)")

        elif web_mapconfig_file == 'No Application Selected (File -> Open)':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot save right now, \n Select File -> Open  (To open the target application)")

        else:
            create_new_map(web_mapconfig_file, self.App1ScrolledESRIstatus.get(), self.App1ScrolledGooglestatus.get(),
                           self.App1ScrolledMapboxstatus.get())

    def saveas(self):
        import tkMessageBox, tkSimpleDialog, os.path
        global web_mapconfig_folder
        web_mapconfig_file = self.App1ScrolledMapLocation.get()
        if web_mapconfig_file == '':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot save right now, \n Select File -> Open  (To open the target application)")

        elif web_mapconfig_file == 'No Application Selected (File -> Open)':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot save right now, \n Select File -> Open  (To open the target application)")

        else:
            new_filename = tkSimpleDialog.askstring('MicroStrategy Map Config', 'What would you like to name the file?')

            new_file = str(os.path.join(os.path.abspath(web_mapconfig_folder), new_filename))
            create_new_map(new_file, self.App1ScrolledESRIstatus.get(), self.App1ScrolledGooglestatus.get(),
                           self.App1ScrolledMapboxstatus.get())

    def create_new_map(mapconfig_file_location, ESRI_entry, Google_entry, Mapbox_entry):
        import os
        import xml.etree.ElementTree
        from xml.sax.saxutils import unescape
        filename = mapconfig_file_location

        if ESRI_entry == 'No Key':
            ESRI_entry = ''
        if Google_entry == 'No Key':
            Google_entry = ''
        if Mapbox_entry == 'No Key':
            Mapbox_entry = ''

        root = xml.etree.ElementTree.Element('mc')

        ec = xml.etree.ElementTree.SubElement(root, "ec")
        gc = xml.etree.ElementTree.SubElement(root, "gc")
        mbc = xml.etree.ElementTree.SubElement(root, "mbc")

        apps = xml.etree.ElementTree.SubElement(ec, "apps")
        key = xml.etree.ElementTree.SubElement(apps, "key")
        root[0][0][0].text = "<![CDATA[" + ESRI_entry + "]]>;"

        mk = xml.etree.ElementTree.SubElement(gc, "mk")
        root[1][0].attrib = {'isPremier': "false"}
        root[1][0].text = Google_entry

        tk = xml.etree.ElementTree.SubElement(mbc, "tk")
        root[2][0].text = '<![CDATA[' + Mapbox_entry + ']]>'

        tree = xml.etree.ElementTree.ElementTree(root)

        tree.write(filename)

        with open(filename, 'r') as myfile:
            data = myfile.read()
        myfile.close()
        os.remove(filename)

        new = unescape(data)
        new = new.replace(';', '')

        f = open(filename, 'w')
        f.write(new)
        f.close()

    def ESRI_checks(self, ESRI_Entry):
        import tkMessageBox
        global sys
        global root
        print('MapConfig_window_support.ESRI_checks')

        if ESRI_Entry == "":
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "There was no provided ESRI key, not configuring ESRI")

            esri_check = 0

            # print('I wanna cancel\n')

        else:
            print('This was the provided ESRI key', ESRI_Entry, '\n')
            if len(ESRI_Entry) == 286:
                if ESRI_Entry.isalnum() == True:

                    esri_check = 1


                else:
                    tkMessageBox.showwarning("MicroStrategy Map Config",
                                             "The key is not alfa-numeric, not configuring ESRI")
                    esri_check = 0


            elif len(ESRI_Entry) > 286:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "The key is too long, not configuring ESRI")
                esri_check = 0


            else:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "The key is too short, not configuring ESRI")
                esri_check = 0
        return esri_check

    def Google_checks(self, Google_Entry):
        import tkMessageBox
        global sys
        global root
        print('MapConfig_window_support.Google_checks')

        if Google_Entry == "":
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "There was no provided Google key, not configuring Google")

            Google_check = 0

            # print('I wanna cancel\n')

        else:
            print('This was the provided Google key', Google_Entry, '\n')
            if len(Google_Entry) == 39:
                if bool(re.match("^[A-Za-z0-9-]*$", Google_Entry)) == True:

                    Google_check = 1


                else:
                    tkMessageBox.showwarning("MicroStrategy Map Config",
                                             "The key is not correct, should only contain letters,numbers, and dashes, not configuring Google")
                    Google_check = 0

            elif len(Google_Entry) > 39:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "The key is too long, not configuring Google")
                Google_check = 0

            else:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "The key is too short, not configuring Google")
                Google_check = 0
        return Google_check

    def Mapbox_checks(self, Mapbox_Entry):
        import tkMessageBox
        global sys
        global root
        print('MapConfig_window_support.Mapbox_checks')

        if Mapbox_Entry == "":
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "There was no provided Mapbox key, not configuring Mapbox")

            mapbox_check = 0

            # print('I wanna cancel\n')

        else:
            print('This was the provided Mapbox key', Mapbox_Entry, '\n')
            if len(Mapbox_Entry) == 470:
                if Mapbox_Entry.isalnum() == True:

                    mapbox_check = 1


                else:
                    tkMessageBox.showwarning("MicroStrategy Map Config",
                                             "The key is not alfa-numeric, not configuring Mapbox")
                    mapbox_check = 0


            elif len(Mapbox_Entry) > 470:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "The key is too long, not configuring Mapbox")
                mapbox_check = 0


            else:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "The key is too short, not configuring Mapbox")
                mapbox_check = 0
        return mapbox_check

    # def CancelMainWindow(self):
    #
    #     import tkMessageBox
    #     msg = tkMessageBox.askyesno("MicroStrategy Map Config", "Are you sure you want to cancel config window?")
    #     if msg:
    #         global root
    #         root.quit()

    def InputKeyWindow(self):
        # import tkSimpleDialog
        # config_site = tkSimpleDialog.askstring('MicroStrategy SAML Config', 'What is the SAML/Config/Open Address?')
        import tkMessageBox
        global new_keys

        location = self.App1ScrolledMapLocation.get()

        if location == '':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot remove keys right now, \n Select File -> Open  (To open the target application)")
        elif location == 'No Application Selected (File -> Open)':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot remove keys right now, \n Select File -> Open  (To open the target application)")
        else:
            new_keys = Toplevel(root)

            new_keys.geometry('900x600')
            new_keys.resizable(width=False, height=False)

            self.newKeyFrame = Frame(new_keys)
            self.newKeyFrame.place(relx=0.0, rely=0.0, relheight=1, relwidth=1)
            self.newKeyFrame.configure(relief=GROOVE)
            self.newKeyFrame.configure(borderwidth="4")
            self.newKeyFrame.configure(relief=GROOVE)
            self.newKeyFrame.configure(background="white")
            self.newKeyFrame.configure(highlightbackground="#d9d9d9")
            self.newKeyFrame.configure(highlightcolor="black")
            self.newKeyFrame.configure(width=595)

            self.App1NewESRI = ScrolledEntry(self.newKeyFrame)
            self.App1NewESRI.place(relx=0.3, rely=0.05, relheight=.1, relwidth=0.6)
            self.App1NewESRI.configure(background="white")
            self.App1NewESRI.configure(disabledforeground="#a3a3a3")
            self.App1NewESRI.configure(foreground="black")
            self.App1NewESRI.configure(highlightbackground="#d9d9d9")
            self.App1NewESRI.configure(highlightcolor="black")
            self.App1NewESRI.configure(insertbackground="black")
            self.App1NewESRI.configure(insertborderwidth="1")
            self.App1NewESRI.configure(selectbackground="#c4c4c4")
            self.App1NewESRI.configure(selectforeground="black")
            self.App1NewESRI.configure(width=15)

            self.NewESRILabel = Label(self.newKeyFrame)
            self.NewESRILabel.place(relx=0.1, rely=0.05, relheight=.1, relwidth=0.2)
            self.NewESRILabel.configure(activebackground="#f9f9f9")
            self.NewESRILabel.configure(activeforeground="black")
            self.NewESRILabel.configure(background="white")
            self.NewESRILabel.configure(disabledforeground="#a3a3a3")
            self.NewESRILabel.configure(foreground="#000000")
            self.NewESRILabel.configure(highlightbackground="#d9d9d9")
            self.NewESRILabel.configure(highlightcolor="black")
            self.NewESRILabel.configure(text='''New ESRI''')

            self.App1NewGoogle = ScrolledEntry(self.newKeyFrame)
            self.App1NewGoogle.place(relx=0.3, rely=0.3, relheight=.1, relwidth=0.6)
            self.App1NewGoogle.configure(background="white")
            self.App1NewGoogle.configure(disabledforeground="#a3a3a3")
            self.App1NewGoogle.configure(foreground="black")
            self.App1NewGoogle.configure(highlightbackground="#d9d9d9")
            self.App1NewGoogle.configure(highlightcolor="black")
            self.App1NewGoogle.configure(insertbackground="black")
            self.App1NewGoogle.configure(insertborderwidth="1")
            self.App1NewGoogle.configure(selectbackground="#c4c4c4")
            self.App1NewGoogle.configure(selectforeground="black")
            self.App1NewGoogle.configure(width=15)

            self.NewGoogleLabel = Label(self.newKeyFrame)
            self.NewGoogleLabel.place(relx=0.1, rely=0.3, relheight=.1, relwidth=0.2)
            self.NewGoogleLabel.configure(activebackground="#f9f9f9")
            self.NewGoogleLabel.configure(activeforeground="black")
            self.NewGoogleLabel.configure(background="white")
            self.NewGoogleLabel.configure(disabledforeground="#a3a3a3")
            self.NewGoogleLabel.configure(foreground="#000000")
            self.NewGoogleLabel.configure(highlightbackground="#d9d9d9")
            self.NewGoogleLabel.configure(highlightcolor="black")
            self.NewGoogleLabel.configure(text='''New Google''')

            self.App1NewMapbox = ScrolledEntry(self.newKeyFrame)
            self.App1NewMapbox.place(relx=0.3, rely=0.55, relheight=.1, relwidth=0.6)
            self.App1NewMapbox.configure(background="white")
            self.App1NewMapbox.configure(disabledforeground="#a3a3a3")
            self.App1NewMapbox.configure(foreground="black")
            self.App1NewMapbox.configure(highlightbackground="#d9d9d9")
            self.App1NewMapbox.configure(highlightcolor="black")
            self.App1NewMapbox.configure(insertbackground="black")
            self.App1NewMapbox.configure(insertborderwidth="1")
            self.App1NewMapbox.configure(selectbackground="#c4c4c4")
            self.App1NewMapbox.configure(selectforeground="black")
            self.App1NewMapbox.configure(width=15)

            self.NewMapboxLabel = Label(self.newKeyFrame)
            self.NewMapboxLabel.place(relx=0.1, rely=0.55, relheight=.1, relwidth=0.2)
            self.NewMapboxLabel.configure(activebackground="#f9f9f9")
            self.NewMapboxLabel.configure(activeforeground="black")
            self.NewMapboxLabel.configure(background="white")
            self.NewMapboxLabel.configure(disabledforeground="#a3a3a3")
            self.NewMapboxLabel.configure(foreground="#000000")
            self.NewMapboxLabel.configure(highlightbackground="#d9d9d9")
            self.NewMapboxLabel.configure(highlightcolor="black")
            self.NewMapboxLabel.configure(text='''New Mapbox''')

            self.App1ApplyKeysButton = Button(self.newKeyFrame)
            self.App1ApplyKeysButton.place(relx=0.3, rely=0.8, relheight=.1, relwidth=0.1)

            self.App1ApplyKeysButton.configure(activebackground="#d9d9d9")
            self.App1ApplyKeysButton.configure(activeforeground="#000000")
            self.App1ApplyKeysButton.configure(background="#d9d9d9")
            self.App1ApplyKeysButton.configure(disabledforeground="#a3a3a3")
            self.App1ApplyKeysButton.configure(foreground="#000000")
            self.App1ApplyKeysButton.configure(highlightbackground="#d9d9d9")
            self.App1ApplyKeysButton.configure(highlightcolor="black")
            self.App1ApplyKeysButton.configure(pady="0")
            self.App1ApplyKeysButton.configure(text='''Apply Keys''')
            self.App1ApplyKeysButton.configure(command=self.apply_keys)

    def reset_MainWindow(self):
        #        self.App1FileStatus.configure(text='''''')
        #       self.App1FolderStatus.configure(text='''''')

        self.App1ScrolledGooglestatus.configure(state=NORMAL)
        self.App1ScrolledESRIstatus.configure(state=NORMAL)
        self.App1ScrolledMapboxstatus.configure(state=NORMAL)
        self.App1ScrolledMapLocation.configure(state=NORMAL)

        self.App1KeyStatus.configure(text='''''')

        blank = ''
        self.App1ScrolledMapLocation.delete(0, END)
        self.App1ScrolledMapLocation.insert(END, blank)

        #        self.App1NewESRI.delete(0, END)
        #       self.App1NewESRI.insert(END, blank)

        #      self.App1NewGoogle.delete(0, END)
        #     self.App1NewGoogle.insert(END, blank)

        #    self.App1NewMapbox.delete(0, END)
        #   self.App1NewMapbox.insert(END, blank)

        self.App1ScrolledESRIstatus.delete(0, END)
        self.App1ScrolledESRIstatus.insert(END, blank)

        self.App1ScrolledGooglestatus.delete(0, END)
        self.App1ScrolledGooglestatus.insert(END, blank)

        self.App1ScrolledMapLocation.delete(0, END)
        self.App1ScrolledMapLocation.insert(END, blank)

        self.App1ScrolledMapboxstatus.delete(0, END)
        self.App1ScrolledMapboxstatus.insert(END, blank)

        #        self.App1ScrolledPath.delete(0, END)
        #       self.App1ScrolledPath.insert(END, blank)

        self.App1ScrolledMapLocation.delete(0, END)
        self.App1ScrolledMapLocation.insert(END, blank)

        self.App1ScrolledGooglestatus.configure(state=DISABLED)
        self.App1ScrolledESRIstatus.configure(state=DISABLED)
        self.App1ScrolledMapboxstatus.configure(state=DISABLED)

        self.App1ScrolledMapLocation.delete(0, END)
        self.App1ScrolledMapLocation.insert(END, 'No Application Selected (File -> Open)')
        self.App1ScrolledMapLocation.configure(state=DISABLED)

    def copy_ESRI_Keys(self):
        import pyperclip
        import tkMessageBox

        web_mapconfig_file = self.App1ScrolledMapLocation.get()
        if web_mapconfig_file == '':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot copy keys right now, \n Select File -> Open  (To open the target application)")

        elif web_mapconfig_file == 'No Application Selected (File -> Open)':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot copy keys right now, \n Select File -> Open  (To open the target application)")

        else:
            if not self.App1ScrolledESRIstatus.get() == 'No Key':
                pyperclip.copy(self.App1ScrolledESRIstatus.get())
            else:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "Theres no key to copy right now")

    def copy_Google_Keys(self):
        import pyperclip
        import tkMessageBox

        web_mapconfig_file = self.App1ScrolledMapLocation.get()
        if web_mapconfig_file == '':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot copy keys right now, \n Select File -> Open  (To open the target application)")

        elif web_mapconfig_file == 'No Application Selected (File -> Open)':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot copy keys right now, \n Select File -> Open  (To open the target application)")

        else:
            if not self.App1ScrolledGooglestatus.get() == 'No Key':
                pyperclip.copy(self.App1ScrolledGooglestatus.get())
            else:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "Theres no key to copy right now")

    def copy_Mapbox_Keys(self):
        import pyperclip
        import tkMessageBox

        web_mapconfig_file = self.App1ScrolledMapLocation.get()
        if web_mapconfig_file == '':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot copy keys right now, \n Select File -> Open  (To open the target application)")

        elif web_mapconfig_file == 'No Application Selected (File -> Open)':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot copy keys right now, \n Select File -> Open  (To open the target application)")

        else:
            if not self.App1ScrolledMapboxstatus.get() == 'No Key':
                pyperclip.copy(self.App1ScrolledMapboxstatus.get())
            else:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "Theres no key to copy right now")

    def requestESRI(self):
        import webbrowser
        Config_url = "https://software.microstrategy.com/Download/ESRIMapKeyGenerator_Employee.aspx"
        try:
            webbrowser.open_new(Config_url)

        except TypeError:
            return

    def requestGoogle(self):
        import webbrowser
        Config_url = "https://developers.google.com/maps/documentation/javascript/get-api-key"
        try:
            webbrowser.open_new(Config_url)

        except TypeError:
            return

    def requestMapbox(self):
        import webbrowser
        Config_url = "https://software.microstrategy.com/Download/MapboxKeyGenerator_Employee.aspx"
        try:
            webbrowser.open_new(Config_url)

        except TypeError:
            return

    def app1_browse(self):
        global MicroStrategy_Web
        import Tkinter
        import tkFileDialog

        root = Tkinter.Tk()
        root.withdraw()

        folder = tkFileDialog.askdirectory(parent=root, initialdir="/",
                                           title="Please select the Target Application's directory: \n ( Web, Mobile, or Library )")

        folder = 'C:/Program Files (x86)/Common Files/MicroStrategy/Tomcat/apache-tomcat-8.0.30/webapps/MicroStrategyMobile'
        self.App1ScrolledGooglestatus.configure(state=NORMAL)
        self.App1ScrolledESRIstatus.configure(state=NORMAL)
        self.App1ScrolledMapboxstatus.configure(state=NORMAL)
        self.App1ScrolledMapLocation.configure(state=NORMAL)
        MicroStrategy_Web = folder
        web_mapconfig_file = Check_web_applications(self, MicroStrategy_Web)
        # web_mapconfig_file=str(web_mapconfig_file[1])
        self.App1ScrolledMapLocation.delete(0, END)
        self.App1ScrolledMapLocation.insert(END, web_mapconfig_file)

        self.App1ScrolledGooglestatus.configure(state=DISABLED)
        self.App1ScrolledESRIstatus.configure(state=DISABLED)
        self.App1ScrolledMapboxstatus.configure(state=DISABLED)
        self.App1ScrolledMapLocation.configure(state=DISABLED)


    def Remove_all_Keys(self):
        import xml.etree.ElementTree
        import tkMessageBox
        global new_keys

        web_mapconfig_file = self.App1ScrolledMapLocation.get()
        if web_mapconfig_file == '':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot remove keys right now, \n Select File -> Open  (To open the target application)")

        elif web_mapconfig_file == 'No Application Selected (File -> Open)':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot remove keys right now, \n Select File -> Open  (To open the target application)")

        else:
            tree = xml.etree.ElementTree.parse(web_mapconfig_file)
            root = tree.getroot()
            len(root.getchildren())

            ec_index = 0
            gc_index = 0
            mbc_index = 0

            for i in range(0, len(root.getchildren())):
                if root[i].tag == 'ec':
                    ec_index = i
                elif root[i].tag == 'gc':
                    gc_index = i
                elif root[i].tag == 'mbc':
                    mbc_index = i

            root[ec_index][0][0].text = ''
            root[gc_index][0].text = ''
            root[mbc_index][0].text = ''

            self.App1ScrolledGooglestatus.configure(state=NORMAL)
            self.App1ScrolledESRIstatus.configure(state=NORMAL)
            self.App1ScrolledMapboxstatus.configure(state=NORMAL)
            self.App1ScrolledMapLocation.configure(state=NORMAL)

            self.App1ScrolledESRIstatus.delete(0, END)
            self.App1ScrolledESRIstatus.insert(END, 'No Key')

            self.App1ScrolledGooglestatus.delete(0, END)
            self.App1ScrolledGooglestatus.insert(END, 'No Key')

            self.App1ScrolledMapboxstatus.delete(0, END)
            self.App1ScrolledMapboxstatus.insert(END, 'No Key')

            self.App1KeyStatus.configure(text='''missing all keys''')

            self.App1ScrolledGooglestatus.configure(state=DISABLED)
            self.App1ScrolledESRIstatus.configure(state=DISABLED)
            self.App1ScrolledMapboxstatus.configure(state=DISABLED)
            self.App1ScrolledMapLocation.configure(state=DISABLED)

    def Remove_ESRI_Keys(self):
        import xml.etree.ElementTree
        import tkMessageBox
        global new_keys

        web_mapconfig_file = self.App1ScrolledMapLocation.get()
        if web_mapconfig_file == '':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot remove keys right now, \n Select File -> Open  (To open the target application)")

        elif web_mapconfig_file == 'No Application Selected (File -> Open)':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot remove keys right now, \n Select File -> Open  (To open the target application)")

        else:

            if not self.App1ScrolledESRIstatus.get() == 'No Key':
                tree = xml.etree.ElementTree.parse(web_mapconfig_file)
                root = tree.getroot()
                len(root.getchildren())

                ec_index = 0
                gc_index = 0
                mbc_index = 0

                for i in range(0, len(root.getchildren())):
                    if root[i].tag == 'ec':
                        ec_index = i
                    elif root[i].tag == 'gc':
                        gc_index = i
                    elif root[i].tag == 'mbc':
                        mbc_index = i

                root[ec_index][0][0].text = ''
                root[gc_index][0].text = ''
                root[mbc_index][0].text = ''

                self.App1ScrolledGooglestatus.configure(state=NORMAL)
                self.App1ScrolledESRIstatus.configure(state=NORMAL)
                self.App1ScrolledMapboxstatus.configure(state=NORMAL)
                self.App1ScrolledMapLocation.configure(state=NORMAL)

                self.App1ScrolledESRIstatus.delete(0, END)
                self.App1ScrolledESRIstatus.insert(END, 'No Key')

                count_of_keys = 0
                if self.App1ScrolledESRIstatus.get() == 'No Key':
                    count_of_keys = count_of_keys + 1
                if self.App1ScrolledGooglestatus.get() == 'No Key':
                    count_of_keys = count_of_keys + 1
                if self.App1ScrolledMapboxstatus.get() == 'No Key':
                    count_of_keys = count_of_keys + 1

                if count_of_keys == 3:
                    self.App1KeyStatus.configure(text='''missing all keys''')
                else:
                    self.App1KeyStatus.configure(text='''missing some keys''')

                self.App1ScrolledGooglestatus.configure(state=DISABLED)
                self.App1ScrolledESRIstatus.configure(state=DISABLED)
                self.App1ScrolledMapboxstatus.configure(state=DISABLED)
                self.App1ScrolledMapLocation.configure(state=DISABLED)
            else:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "There is no ESRI key present to remove)")

    def Remove_Google_Keys(self):
        import xml.etree.ElementTree
        import tkMessageBox
        global new_keys

        web_mapconfig_file = self.App1ScrolledMapLocation.get()
        if web_mapconfig_file == '':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot remove keys right now, \n Select File -> Open  (To open the target application)")

        elif web_mapconfig_file == 'No Application Selected (File -> Open)':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot remove keys right now, \n Select File -> Open  (To open the target application)")

        else:
            tree = xml.etree.ElementTree.parse(web_mapconfig_file)
            root = tree.getroot()
            len(root.getchildren())

            ec_index = 0
            gc_index = 0
            mbc_index = 0

            for i in range(0, len(root.getchildren())):
                if root[i].tag == 'ec':
                    ec_index = i
                elif root[i].tag == 'gc':
                    gc_index = i
                elif root[i].tag == 'mbc':
                    mbc_index = i

            root[ec_index][0][0].text = ''
            root[gc_index][0].text = ''
            root[mbc_index][0].text = ''

            self.App1ScrolledGooglestatus.configure(state=NORMAL)
            self.App1ScrolledESRIstatus.configure(state=NORMAL)
            self.App1ScrolledMapboxstatus.configure(state=NORMAL)
            self.App1ScrolledMapLocation.configure(state=NORMAL)

            self.App1ScrolledGooglestatus.delete(0, END)
            self.App1ScrolledGooglestatus.insert(END, 'No Key')

            count_of_keys = 0
            if self.App1ScrolledESRIstatus.get() == 'No Key':
                count_of_keys = count_of_keys + 1
            if self.App1ScrolledGooglestatus.get() == 'No Key':
                count_of_keys = count_of_keys + 1
            if self.App1ScrolledMapboxstatus.get() == 'No Key':
                count_of_keys = count_of_keys + 1

            if count_of_keys == 3:
                self.App1KeyStatus.configure(text='''missing all keys''')
            else:
                self.App1KeyStatus.configure(text='''missing some keys''')

            self.App1ScrolledGooglestatus.configure(state=DISABLED)
            self.App1ScrolledESRIstatus.configure(state=DISABLED)
            self.App1ScrolledMapboxstatus.configure(state=DISABLED)
            self.App1ScrolledMapLocation.configure(state=DISABLED)

    def Remove_Mapbox_Keys(self):
        import xml.etree.ElementTree
        import tkMessageBox
        global new_keys

        web_mapconfig_file = self.App1ScrolledMapLocation.get()
        if web_mapconfig_file == '':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot remove keys right now, \n Select File -> Open  (To open the target application)")

        elif web_mapconfig_file == 'No Application Selected (File -> Open)':
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "Cannot remove keys right now, \n Select File -> Open  (To open the target application)")

        else:
            tree = xml.etree.ElementTree.parse(web_mapconfig_file)
            root = tree.getroot()
            len(root.getchildren())

            ec_index = 0
            gc_index = 0
            mbc_index = 0

            for i in range(0, len(root.getchildren())):
                if root[i].tag == 'ec':
                    ec_index = i
                elif root[i].tag == 'gc':
                    gc_index = i
                elif root[i].tag == 'mbc':
                    mbc_index = i

            root[ec_index][0][0].text = ''
            root[gc_index][0].text = ''
            root[mbc_index][0].text = ''

            self.App1ScrolledGooglestatus.configure(state=NORMAL)
            self.App1ScrolledESRIstatus.configure(state=NORMAL)
            self.App1ScrolledMapboxstatus.configure(state=NORMAL)
            self.App1ScrolledMapLocation.configure(state=NORMAL)

            self.App1ScrolledMapboxstatus.delete(0, END)
            self.App1ScrolledMapboxstatus.insert(END, 'No Key')

            count_of_keys = 0
            if self.App1ScrolledESRIstatus.get() == 'No Key':
                count_of_keys = count_of_keys + 1
            if self.App1ScrolledGooglestatus.get() == 'No Key':
                count_of_keys = count_of_keys + 1
            if self.App1ScrolledMapboxstatus.get() == 'No Key':
                count_of_keys = count_of_keys + 1

            if count_of_keys == 3:
                self.App1KeyStatus.configure(text='''missing all keys''')
            else:
                self.App1KeyStatus.configure(text='''missing some keys''')

            self.App1ScrolledGooglestatus.configure(state=DISABLED)
            self.App1ScrolledESRIstatus.configure(state=DISABLED)
            self.App1ScrolledMapboxstatus.configure(state=DISABLED)
            self.App1ScrolledMapLocation.configure(state=DISABLED)

    def apply_keys(self):
        web_mapconfig_file = self.App1ScrolledMapLocation.get()
        # tree = xml.etree.ElementTree.parse(web_mapconfig_file)
        # root = tree.getroot()
        # len(root.getchildren())
        #
        # ec_index = 0
        # gc_index = 0
        # mbc_index = 0
        #
        # for i in range(0, len(root.getchildren())):
        #     if root[i].tag == 'ec':
        #         ec_index = i
        #     elif root[i].tag == 'gc':
        #         gc_index = i
        #     elif root[i].tag == 'mbc':
        #         mbc_index = i

        self.App1ScrolledGooglestatus.configure(state=NORMAL)
        self.App1ScrolledESRIstatus.configure(state=NORMAL)
        self.App1ScrolledMapboxstatus.configure(state=NORMAL)
        self.App1ScrolledMapLocation.configure(state=NORMAL)

        new_esri = self.App1NewESRI.get()
        esri_check = self.ESRI_checks(new_esri)
        if not esri_check == 0:
            #  root[ec_index][0][0].text = new_esri
            self.App1ScrolledESRIstatus.delete(0, END)
            self.App1ScrolledESRIstatus.insert(END, new_esri)

        new_google = self.App1NewGoogle.get()
        google_check = self.Google_checks(new_google)
        if not google_check == 0:
            # root[ec_index][0][0].text = new_esri
            self.App1ScrolledGooglestatus.delete(0, END)
            self.App1ScrolledGooglestatus.insert(END, new_google)

        new_mapbox = self.App1NewMapbox.get()
        mapbox_check = self.Mapbox_checks(new_mapbox)
        if not mapbox_check == 0:
            # root[mbc_index][0].text = new_mapbox
            self.App1ScrolledMapboxstatus.delete(0, END)
            self.App1ScrolledMapboxstatus.insert(END, new_mapbox)

            self.App1ScrolledGooglestatus.configure(state=DISABLED)
            self.App1ScrolledESRIstatus.configure(state=DISABLED)
            self.App1ScrolledMapboxstatus.configure(state=DISABLED)
            self.App1ScrolledMapLocation.configure(state=DISABLED)

        self.App1KeyStatus.configure(state=NORMAL)
        count_of_keys = 0
        if self.App1ScrolledESRIstatus.get() == 'No Key':
            count_of_keys = count_of_keys + 1
        if self.App1ScrolledGooglestatus.get() == 'No Key':
            count_of_keys = count_of_keys + 1
        if self.App1ScrolledMapboxstatus.get() == 'No Key':
            count_of_keys = count_of_keys + 1

        if count_of_keys == 3:
            self.App1KeyStatus.configure(text='''missing all keys''')
        elif count_of_keys == 0:
            self.App1KeyStatus.configure(text='''missing no keys''')
        else:
            self.App1KeyStatus.configure(text='''missing some keys''')

        self.App1KeyStatus.configure(state=DISABLED)
        self.App1ScrolledGooglestatus.configure(state=DISABLED)
        self.App1ScrolledESRIstatus.configure(state=DISABLED)
        self.App1ScrolledMapboxstatus.configure(state=DISABLED)
        self.App1ScrolledMapLocation.configure(state=DISABLED)

        destroy_newKeysWindow()

    def __init__(self, top=None):

        web_mapconfig_file = ''

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#d9d9d9'  # X11 color: 'gray85'
        font9 = "-family {Segoe UI} -size 18 -weight normal -slant " \
                "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("1200x500")
        top.resizable(width=False, height=False)
        top.title("MicroStrategyMapConfig")
        top.configure(background="#ffffff")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = Frame(top)
        self.Frame1.place(relx=0.0, rely=0.0, relheight=1, relwidth=1)
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(borderwidth="4")
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(background="white")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")


        self.app1MapKeyStatusLabel = Label(self.Frame1)
        self.app1MapKeyStatusLabel.place(relx=0.01, rely=0.375, relheight=.05, relwidth=.1)
        self.app1MapKeyStatusLabel.configure(activebackground="#f9f9f9")
        self.app1MapKeyStatusLabel.configure(activeforeground="black")
        self.app1MapKeyStatusLabel.configure(background="white")
        self.app1MapKeyStatusLabel.configure(disabledforeground="#a3a3a3")
        self.app1MapKeyStatusLabel.configure(foreground="#000000")
        self.app1MapKeyStatusLabel.configure(highlightbackground="#d9d9d9")
        self.app1MapKeyStatusLabel.configure(highlightcolor="black")
        self.app1MapKeyStatusLabel.configure(text='''Presence of Map Keys:''')

        self.Label14 = Label(self.Frame1)
        self.Label14.place(relx=0.01, rely=0.595, relheight=.05, relwidth=.1)
        self.Label14.configure(activebackground="#f9f9f9")
        self.Label14.configure(activeforeground="black")
        self.Label14.configure(background="white")
        self.Label14.configure(disabledforeground="#a3a3a3")
        self.Label14.configure(foreground="#000000")
        self.Label14.configure(highlightbackground="#d9d9d9")
        self.Label14.configure(highlightcolor="black")
        self.Label14.configure(text='''Current ESRI:''')

        self.Label17 = Label(self.Frame1)
        self.Label17.place(relx=0.01, rely=0.725, relheight=.05, relwidth=.1)
        self.Label17.configure(activebackground="#f9f9f9")
        self.Label17.configure(activeforeground="black")
        self.Label17.configure(background="white")
        self.Label17.configure(disabledforeground="#a3a3a3")
        self.Label17.configure(foreground="#000000")
        self.Label17.configure(highlightbackground="#d9d9d9")
        self.Label17.configure(highlightcolor="black")
        self.Label17.configure(text='''Current Google:''')

        self.Label20 = Label(self.Frame1)
        self.Label20.place(relx=0.01, rely=0.85, relheight=.05, relwidth=.1)
        self.Label20.configure(activebackground="#f9f9f9")
        self.Label20.configure(activeforeground="black")
        self.Label20.configure(background="white")
        self.Label20.configure(disabledforeground="#a3a3a3")
        self.Label20.configure(foreground="#000000")
        self.Label20.configure(highlightbackground="#d9d9d9")
        self.Label20.configure(highlightcolor="black")
        self.Label20.configure(text='''Current Mapbox:''')



        self.App1KeyStatus = Label(self.Frame1)
        self.App1KeyStatus.place(relx=0.15, rely=0.35, relheight=.1, relwidth=.25)
        self.App1KeyStatus.configure(activebackground="#f9f9f9")
        self.App1KeyStatus.configure(activeforeground="black")
        self.App1KeyStatus.configure(background="#d9d9d9")
        self.App1KeyStatus.configure(disabledforeground="#a3a3a3")
        self.App1KeyStatus.configure(foreground="#000000")
        self.App1KeyStatus.configure(highlightbackground="#d9d9d9")
        self.App1KeyStatus.configure(highlightcolor="black")
        self.App1KeyStatus.configure(text='''''')

        self.App1ScrolledESRIstatus = ScrolledEntry(self.Frame1)
        self.App1ScrolledESRIstatus.place(relx=0.15, rely=0.57, relheight=.1, relwidth=.70)
        self.App1ScrolledESRIstatus.configure(background="white")
        self.App1ScrolledESRIstatus.configure(disabledforeground="#a3a3a3")
        self.App1ScrolledESRIstatus.configure(foreground="black")
        self.App1ScrolledESRIstatus.configure(highlightbackground="#d9d9d9")
        self.App1ScrolledESRIstatus.configure(highlightcolor="black")
        self.App1ScrolledESRIstatus.configure(insertbackground="black")
        self.App1ScrolledESRIstatus.configure(insertborderwidth="1")
        self.App1ScrolledESRIstatus.configure(selectbackground="#c4c4c4")
        self.App1ScrolledESRIstatus.configure(selectforeground="black")
        self.App1ScrolledESRIstatus.configure(width=15)
        self.App1ScrolledESRIstatus.configure(state=DISABLED)

        self.App1ScrolledMapLocation = ScrolledEntry(self.Frame1)
        self.App1ScrolledMapLocation.place(relx=0.15, rely=0.1, relheight=.1, relwidth=.70)
        self.App1ScrolledMapLocation.configure(background="white")
        self.App1ScrolledMapLocation.configure(disabledforeground="#a3a3a3")
        self.App1ScrolledMapLocation.configure(foreground="black")
        self.App1ScrolledMapLocation.configure(highlightbackground="black")
        self.App1ScrolledMapLocation.configure(highlightcolor="black")
        self.App1ScrolledMapLocation.configure(insertbackground="black")
        self.App1ScrolledMapLocation.configure(insertborderwidth="1")
        self.App1ScrolledMapLocation.configure(selectbackground="#c4c4c4")
        self.App1ScrolledMapLocation.configure(selectforeground="black")
        self.App1ScrolledMapLocation.configure(width=15)
        self.App1ScrolledMapLocation.configure(relief="solid")
        self.App1ScrolledMapLocation.configure(borderwidth="2")

        self.App1ScrolledMapLocation.delete(0, END)
        self.App1ScrolledMapLocation.insert(END, 'No Application Selected (File -> Open)')
        self.App1ScrolledMapLocation.configure(state=DISABLED)

        self.App1ScrolledGooglestatus = ScrolledEntry(self.Frame1)
        self.App1ScrolledGooglestatus.place(relx=0.15, rely=0.7, relheight=.1, relwidth=.70)
        self.App1ScrolledGooglestatus.configure(background="white")
        self.App1ScrolledGooglestatus.configure(disabledforeground="#a3a3a3")
        self.App1ScrolledGooglestatus.configure(foreground="black")
        self.App1ScrolledGooglestatus.configure(highlightbackground="#d9d9d9")
        self.App1ScrolledGooglestatus.configure(highlightcolor="black")
        self.App1ScrolledGooglestatus.configure(insertbackground="black")
        self.App1ScrolledGooglestatus.configure(insertborderwidth="1")
        self.App1ScrolledGooglestatus.configure(selectbackground="#c4c4c4")
        self.App1ScrolledGooglestatus.configure(selectforeground="black")
        self.App1ScrolledGooglestatus.configure(width=15)
        self.App1ScrolledGooglestatus.configure(state=DISABLED)

        self.App1ScrolledMapboxstatus = ScrolledEntry(self.Frame1)
        self.App1ScrolledMapboxstatus.place(relx=0.15, rely=0.83, relheight=.1, relwidth=.70)
        self.App1ScrolledMapboxstatus.configure(background="white")
        self.App1ScrolledMapboxstatus.configure(disabledforeground="#a3a3a3")
        self.App1ScrolledMapboxstatus.configure(foreground="black")
        self.App1ScrolledMapboxstatus.configure(highlightbackground="#d9d9d9")
        self.App1ScrolledMapboxstatus.configure(highlightcolor="black")
        self.App1ScrolledMapboxstatus.configure(insertbackground="black")
        self.App1ScrolledMapboxstatus.configure(insertborderwidth="1")
        self.App1ScrolledMapboxstatus.configure(selectbackground="#c4c4c4")
        self.App1ScrolledMapboxstatus.configure(selectforeground="black")
        self.App1ScrolledMapboxstatus.configure(width=15)
        self.App1ScrolledMapboxstatus.configure(state=DISABLED)

        # self.Label31 = Label(self.Frame1)
        # self.Label31.place(relx=0.01, rely=0.87, height=31, width=80)
        # self.Label31.configure(activebackground="#f9f9f9")
        # self.Label31.configure(activeforeground="black")
        # self.Label31.configure(background="#d9d9d9")
        # self.Label31.configure(disabledforeground="#a3a3a3")
        # self.Label31.configure(foreground="#000000")
        # self.Label31.configure(highlightbackground="#d9d9d9")
        # self.Label31.configure(highlightcolor="black")
        # self.Label31.configure(text='''New MapBox''')
        #
        # self.App1FolderStatus = Label(self.Frame1)
        # self.App1FolderStatus.place(relx=0.5, rely=0.25, height=30, width=350)
        # self.App1FolderStatus.configure(activebackground="#f9f9f9")
        # self.App1FolderStatus.configure(activeforeground="black")
        # self.App1FolderStatus.configure(background="#d9d9d9")
        # self.App1FolderStatus.configure(disabledforeground="#a3a3a3")
        # self.App1FolderStatus.configure(foreground="#000000")
        # self.App1FolderStatus.configure(highlightbackground="#d9d9d9")
        # self.App1FolderStatus.configure(highlightcolor="black")
        # self.App1FolderStatus.configure(text='''''')

        # self.App1ApplyKeysButton = Button(top)
        # self.App1ApplyKeysButton.place(relx=0.13, rely=0.9, height=42, width=103)
        #
        # self.App1ApplyKeysButton.configure(activebackground="#d9d9d9")
        # self.App1ApplyKeysButton.configure(activeforeground="#000000")
        # self.App1ApplyKeysButton.configure(background="#d9d9d9")
        # self.App1ApplyKeysButton.configure(disabledforeground="#a3a3a3")
        # self.App1ApplyKeysButton.configure(foreground="#000000")
        # self.App1ApplyKeysButton.configure(highlightbackground="#d9d9d9")
        # self.App1ApplyKeysButton.configure(highlightcolor="black")
        # self.App1ApplyKeysButton.configure(pady="0")
        # self.App1ApplyKeysButton.configure(text='''Apply Keys''')
        # self.App1ApplyKeysButton.configure(command=self.apply_keys)

        # self.App1RemoveKeysButton = Button(top)
        # self.App1RemoveKeysButton.place(relx=0.2, rely=0.9, height=42
        #                                 , width=121)
        # self.App1RemoveKeysButton.configure(activebackground="#d9d9d9")
        # self.App1RemoveKeysButton.configure(activeforeground="#000000")
        # self.App1RemoveKeysButton.configure(background="#d9d9d9")
        # self.App1RemoveKeysButton.configure(disabledforeground="#a3a3a3")
        # self.App1RemoveKeysButton.configure(foreground="#000000")
        # self.App1RemoveKeysButton.configure(highlightbackground="#d9d9d9")
        # self.App1RemoveKeysButton.configure(highlightcolor="black")
        # self.App1RemoveKeysButton.configure(pady="0")
        # self.App1RemoveKeysButton.configure(text='''Remove Keys''')
        # self.App1RemoveKeysButton.configure(command=self.app1_RemoveKeys)

        # self.CancelMainWinowButton = Button(top)
        # self.CancelMainWinowButton.place(relx=0.42, rely=0.93, height=42
        #                                  , width=66)
        # self.CancelMainWinowButton.configure(activebackground="#d9d9d9")
        # self.CancelMainWinowButton.configure(activeforeground="#000000")
        # self.CancelMainWinowButton.configure(background="#d9d9d9")
        # self.CancelMainWinowButton.configure(disabledforeground="#a3a3a3")
        # self.CancelMainWinowButton.configure(foreground="#000000")
        # self.CancelMainWinowButton.configure(highlightbackground="#d9d9d9")
        # self.CancelMainWinowButton.configure(highlightcolor="black")
        # self.CancelMainWinowButton.configure(pady="0")
        # self.CancelMainWinowButton.configure(text='''Cancel''')
        # self.CancelMainWinowButton.configure(command=self.CancelMainWinow)

        # self.ResetButton = Button(top)
        # self.ResetButton.place(relx=0.36, rely=0.93, height=42, width=58)
        # self.ResetButton.configure(activebackground="#d9d9d9")
        # self.ResetButton.configure(activeforeground="#000000")
        # self.ResetButton.configure(background="#d9d9d9")
        # self.ResetButton.configure(disabledforeground="#a3a3a3")
        # self.ResetButton.configure(foreground="#000000")
        # self.ResetButton.configure(highlightbackground="#d9d9d9")
        # self.ResetButton.configure(highlightcolor="black")
        # self.ResetButton.configure(pady="0")
        # self.ResetButton.configure(text='''Reset''')

        self.App1TitleLabel = Label(self.Frame1)
        self.App1TitleLabel.place(relx=0.01, rely=0.125, relheight=.05, relwidth=.1)
        self.App1TitleLabel.configure(activebackground="#f9f9f9")
        self.App1TitleLabel.configure(activeforeground="black")
        # self.App1TitleLabel.configure(relief="solid")
        # self.App1TitleLabel.configure(borderwidth="2")
        self.App1TitleLabel.configure(background="white")
        self.App1TitleLabel.configure(disabledforeground="#a3a3a3")
        self.App1TitleLabel.configure(foreground="#000000")
        self.App1TitleLabel.configure(highlightbackground="black")
        self.App1TitleLabel.configure(highlightcolor="black")
        self.App1TitleLabel.configure(text='''MapConfig File Path:''')

        self.MainWindowTitle = Label(top)
        self.MainWindowTitle.place(relx=0.0, rely=0.00, relheight=.08, relwidth=1)
        self.MainWindowTitle.configure(activebackground="#f9f9f9")
        self.MainWindowTitle.configure(activeforeground="black")
        self.MainWindowTitle.configure(background="white")
        self.MainWindowTitle.configure(disabledforeground="#a3a3a3")
        self.MainWindowTitle.configure(font=font9)
        self.MainWindowTitle.configure(bg="white")
        self.MainWindowTitle.configure(fg="red")
        self.MainWindowTitle.configure(foreground="red")
        self.MainWindowTitle.configure(highlightbackground="#d9d9d9")
        self.MainWindowTitle.configure(highlightcolor="red")
        self.MainWindowTitle.configure(text='''MicroStrategy Map Config Tool''')

        # self.App1BrowseButton = Button(top)
        # self.App1BrowseButton.place(relx=0.25, rely=0.09, height=42, width=72)
        # self.App1BrowseButton.configure(activebackground="#d9d9d9")
        # self.App1BrowseButton.configure(activeforeground="#000000")
        # self.App1BrowseButton.configure(background="#d9d9d9")
        # self.App1BrowseButton.configure(disabledforeground="#a3a3a3")
        # self.App1BrowseButton.configure(foreground="#000000")
        # self.App1BrowseButton.configure(highlightbackground="#d9d9d9")
        # self.App1BrowseButton.configure(highlightcolor="black")
        # self.App1BrowseButton.configure(pady="0")
        # self.App1BrowseButton.configure(text='''Browse''')
        # self.App1BrowseButton.configure(command=self.app1_browse)

        # self.App1ExeButton = Button(self.Frame1)
        # self.App1ExeButton.place(relx=0.7, rely=0.04, height=42, width=72)
        # self.App1ExeButton.configure(activebackground="#d9d9d9")
        # self.App1ExeButton.configure(activeforeground="#000000")
        # self.App1ExeButton.configure(background="#d9d9d9")
        # self.App1ExeButton.configure(disabledforeground="#a3a3a3")
        # self.App1ExeButton.configure(foreground="#000000")
        # self.App1ExeButton.configure(highlightbackground="#d9d9d9")
        # self.App1ExeButton.configure(highlightcolor="black")
        # self.App1ExeButton.configure(pady="0")
        # self.App1ExeButton.configure(text='''Execute''')
        # self.App1ExeButton.configure(command=self.app1_Exe)

        # self.App1ScrolledPath = ScrolledEntry(top)
        # self.App1ScrolledPath.place(relx=0.04, rely=0.14, height=55
        #                             , relwidth=0.5)
        # self.App1ScrolledPath.configure(background="white")
        # self.App1ScrolledPath.configure(disabledforeground="#a3a3a3")
        # self.App1ScrolledPath.configure(foreground="black")
        # self.App1ScrolledPath.configure(highlightbackground="#d9d9d9")
        # self.App1ScrolledPath.configure(highlightcolor="black")
        # self.App1ScrolledPath.configure(insertbackground="black")
        # self.App1ScrolledPath.configure(insertborderwidth="1")
        # self.App1ScrolledPath.configure(selectbackground="#c4c4c4")
        # self.App1ScrolledPath.configure(selectforeground="black")
        # self.App1ScrolledPath.configure(width=15)


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        global vsb
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                      | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                      + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)

    return wrapped


class ScrolledEntry(AutoScroll, Entry):
    '''A standard Tkinter Entry widget with a horizontal scrollbar
    that will automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        Entry.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


if __name__ == '__main__':
    vp_start_gui()
