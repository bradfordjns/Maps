#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    Jun 18, 2018 10:19:24 AM

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import MapConfig_window_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.state("zoomed")
    top = New_Toplevel(root)
    MapConfig_window_support.init(root, top)
    root.mainloop()


w = None


def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    top = New_Toplevel(w)
    MapConfig_window_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


class New_Toplevel:

    def Execute(self):
        from MapConfig_window_support import Check_keys
        import tkMessageBox

        from MapConfig_window_support import Check_applications

        from MapConfig_window_support import create_new_map

        ESRI_Entry = self.ESRI_Entry.get()
        Google_Entry = self.Google_Entry.get()
        Mapbox_Entry = self.Mapbox_Entry.get()

        ESRI = 0
        Google = 0
        Mapbox = 0
        Advance = 0

        [Advance, ESRI, Google, Mapbox, ESRI_Entry, Google_Entry, Mapbox_Entry] = Check_keys(Advance, ESRI, Google,
                                                                                             Mapbox, ESRI_Entry,
                                                                                             Google_Entry, Mapbox_Entry)
        if Advance == 1:

            MicroStrategy_Web = self.MicroStrategy_Web_Entry.get()
            MicroStrategy_Mobile = self.MicroStrategy_Mobile_Entry.get()
            MicroStrategy_Library = self.MicroStrategy_Library_Entry.get()

            alter_web, web_mapconfig_file, alter_mobile, mobile_mapconfig_file = Check_applications(MicroStrategy_Web,
                                                                                                    MicroStrategy_Mobile,
                                                                                                    MicroStrategy_Library)

            if alter_web == 1:
                create_new_map(str(web_mapconfig_file), ESRI_Entry, Google_Entry, Mapbox_Entry)
                print('made a mobile_mapconfig_file')

            elif alter_web == 2:
                print('a mobile_mapconfig_file is already present review the current keys')
            else:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "something wrong in the mobile application, \n please review mobile application path or cancel application")
            if alter_mobile == 1:
                create_new_map(str(mobile_mapconfig_file), ESRI_Entry, Google_Entry, Mapbox_Entry)
                print('made a mobile_mapconfig_file')

            elif alter_mobile == 2:
                print('a mobile_mapconfig_file is already present review the current keys')
            else:
                tkMessageBox.showwarning("MicroStrategy Map Config",
                                         "something wrong in the mobile application, \n please review mobile application path or cancel application")
        else:
            tkMessageBox.showwarning("MicroStrategy Map Config",
                                     "No Keys were provided, \n please re-enter or cancel application")

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#d9d9d9'  # X11 color: 'gray85'
        font10 = "-family {Yu Gothic} -size 10 -weight normal -slant " \
                 "italic -underline 0 -overstrike 0"
        font11 = "-family {Yu Gothic} -size 16 -weight normal -slant " \
                 "italic -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 12 -weight normal -slant " \
                "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("1486x1399+4211+-372")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.ESRI_Label = ttk.Label(top)
        self.ESRI_Label.place(relx=0.03, rely=0.11, height=40, width=260)
        self.ESRI_Label.configure(background="#d9d9d9")
        self.ESRI_Label.configure(foreground="#000000")
        self.ESRI_Label.configure(font=font10)
        self.ESRI_Label.configure(relief=FLAT)
        self.ESRI_Label.configure(text='''Please enter your ESRI Key here:\n Only the code within CDATA[ ]''')

        self.Google_Label = ttk.Label(top)
        self.Google_Label.place(relx=0.03, rely=0.21, height=40, width=260)
        self.Google_Label.configure(background="#d9d9d9")
        self.Google_Label.configure(foreground="#000000")
        self.Google_Label.configure(font=font10)
        self.Google_Label.configure(relief=FLAT)
        self.Google_Label.configure(
            text='''Please enter your Google Key here:\n Enter the code after: isPremier="false">''')

        self.Mapbox_Label = ttk.Label(top)
        self.Mapbox_Label.place(relx=0.03, rely=0.29, height=40, width=260)
        self.Mapbox_Label.configure(background="#d9d9d9")
        self.Mapbox_Label.configure(foreground="#000000")
        self.Mapbox_Label.configure(font=font10)
        self.Mapbox_Label.configure(relief=FLAT)
        self.Mapbox_Label.configure(text='''Please enter your MapBox Key here:\n Only the code within CDATA[ ]''')

        self.ESRI_Entry = ttk.Entry(top)
        self.ESRI_Entry.place(relx=0.28, rely=0.11, relheight=0.05
                              , relwidth=0.48)
        self.ESRI_Entry.configure(takefocus="")
        self.ESRI_Entry.configure(cursor="ibeam")
        self.ESRI_Entry.configure(font=font10)

        self.Google_Entry = ttk.Entry(top)
        self.Google_Entry.place(relx=0.28, rely=0.21, relheight=0.05
                                , relwidth=0.48)
        self.Google_Entry.configure(takefocus="")
        self.Google_Entry.configure(cursor="ibeam")
        self.Google_Entry.configure(font=font10)

        self.Mapbox_Entry = ttk.Entry(top)
        self.Mapbox_Entry.place(relx=0.28, rely=0.29, relheight=0.05
                                , relwidth=0.48)
        self.Mapbox_Entry.configure(takefocus="")
        self.Mapbox_Entry.configure(cursor="ibeam")
        self.Mapbox_Entry.configure(font=font10)

        self.Execute_Button = Button(top)
        self.Execute_Button.place(relx=0.09, rely=0.44, height=54, width=102)
        self.Execute_Button.configure(activebackground="#d9d9d9")
        self.Execute_Button.configure(activeforeground="#000000")
        self.Execute_Button.configure(background="#d9d9d9")
        self.Execute_Button.configure(command=self.Execute)
        self.Execute_Button.configure(disabledforeground="#a3a3a3")
        self.Execute_Button.configure(font=font9)
        self.Execute_Button.configure(foreground="#000000")
        self.Execute_Button.configure(highlightbackground="#d9d9d9")
        self.Execute_Button.configure(highlightcolor="black")
        self.Execute_Button.configure(pady="0")
        self.Execute_Button.configure(text='''Execute''')

        self.Cancel_Button = Button(top)
        self.Cancel_Button.place(relx=0.21, rely=0.44, height=54, width=91)
        self.Cancel_Button.configure(activebackground="#d9d9d9")
        self.Cancel_Button.configure(activeforeground="#000000")
        self.Cancel_Button.configure(background="#d9d9d9")
        self.Cancel_Button.configure(command=MapConfig_window_support.Cancel)
        self.Cancel_Button.configure(disabledforeground="#a3a3a3")
        self.Cancel_Button.configure(font=font9)
        self.Cancel_Button.configure(foreground="#000000")
        self.Cancel_Button.configure(highlightbackground="#d9d9d9")
        self.Cancel_Button.configure(highlightcolor="black")
        self.Cancel_Button.configure(pady="0")
        self.Cancel_Button.configure(text='''Cancel''')

        self.MicroStrategy_Web_Label = ttk.Label(top)
        self.MicroStrategy_Web_Label.place(relx=0.03, rely=0.61, height=40
                                           , width=372)
        self.MicroStrategy_Web_Label.configure(background="#d9d9d9")
        self.MicroStrategy_Web_Label.configure(foreground="#000000")
        self.MicroStrategy_Web_Label.configure(font=font10)
        self.MicroStrategy_Web_Label.configure(relief=FLAT)
        self.MicroStrategy_Web_Label.configure(text='''MicroStrategy Web Location''')

        self.MicroStrategy_Mobile_Label = ttk.Label(top)
        self.MicroStrategy_Mobile_Label.place(relx=0.03, rely=0.68, height=40
                                              , width=402)
        self.MicroStrategy_Mobile_Label.configure(background="#d9d9d9")
        self.MicroStrategy_Mobile_Label.configure(foreground="#000000")
        self.MicroStrategy_Mobile_Label.configure(font=font10)
        self.MicroStrategy_Mobile_Label.configure(relief=FLAT)
        self.MicroStrategy_Mobile_Label.configure(text='''MicroStrategy Mobile Location''')

        self.MicroStrategy_Library_Label = ttk.Label(top)
        self.MicroStrategy_Library_Label.place(relx=0.03, rely=0.74, height=40
                                               , width=404)
        self.MicroStrategy_Library_Label.configure(background="#d9d9d9")
        self.MicroStrategy_Library_Label.configure(foreground="#000000")
        self.MicroStrategy_Library_Label.configure(font=font10)
        self.MicroStrategy_Library_Label.configure(relief=FLAT)
        self.MicroStrategy_Library_Label.configure(text='''MicroStrategy Library Location''')

        self.MicroStrategy_Web_Entry = ttk.Entry(top)
        self.MicroStrategy_Web_Entry.place(relx=0.25, rely=0.6
                                           , relheight=0.04, relwidth=0.7)
        self.MicroStrategy_Web_Entry.configure(takefocus="")
        self.MicroStrategy_Web_Entry.configure(cursor="ibeam")
        self.MicroStrategy_Web_Entry.configure(font=font10)
        self.MicroStrategy_Web_Entry.insert(END,
                                            "C:/Program Files (x86)/Common Files/MicroStrategy/Tomcat/apache-tomcat-8.0.30/webapps/MicroStrategy")

        self.MicroStrategy_Mobile_Entry = ttk.Entry(top)
        self.MicroStrategy_Mobile_Entry.place(relx=0.25, rely=0.67
                                              , relheight=0.04, relwidth=0.7)
        self.MicroStrategy_Mobile_Entry.configure(takefocus="")
        self.MicroStrategy_Mobile_Entry.configure(cursor="ibeam")
        self.MicroStrategy_Mobile_Entry.configure(font=font10)
        self.MicroStrategy_Mobile_Entry.insert(END,
                                               "C:/Program Files (x86)/Common Files/MicroStrategy/Tomcat/apache-tomcat-8.0.30/webapps/MicroStrategyMobile/plugins/ConnectorForMap/WEB-INF/xml/config/mapConfig.xml")

        self.MicroStrategy_Library_Entry = ttk.Entry(top)
        self.MicroStrategy_Library_Entry.place(relx=0.25, rely=0.74
                                               , relheight=0.04, relwidth=0.7)
        self.MicroStrategy_Library_Entry.configure(takefocus="")
        self.MicroStrategy_Library_Entry.configure(cursor="ibeam")
        self.MicroStrategy_Library_Entry.configure(font=font10)
        self.MicroStrategy_Library_Entry.insert(END,
                                                "C:/Program Files (x86)/Common Files/MicroStrategy/Tomcat/apache-tomcat-8.0.30/webapps/MicroStrategyLibrary/plugins/ConnectorForMap/WEB-INF/xml/config/mapConfig.xml")

        self.Window_Header = Label(top)
        self.Window_Header.place(relx=0.24, rely=0.03, height=48, width=532)
        self.Window_Header.configure(activebackground="#f9f9f9")
        self.Window_Header.configure(activeforeground="black")
        self.Window_Header.configure(background="#d9d9d9")
        self.Window_Header.configure(disabledforeground="#a3a3a3")
        self.Window_Header.configure(font=font11)
        self.Window_Header.configure(foreground="#000000")
        self.Window_Header.configure(highlightbackground="#d9d9d9")
        self.Window_Header.configure(highlightcolor="black")
        self.Window_Header.configure(text='''MicroStrategy Map Key Config Tool''')


if __name__ == '__main__':
    vp_start_gui()
